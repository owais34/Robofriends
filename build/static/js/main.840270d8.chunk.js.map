{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","imgpath","id","className","src","class","name","email","CardList","robots","CardArray","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbH,SAACC,GACX,IAAIC,EAAQ,wBAAwBD,EAAME,GAAG,WAC7C,OACE,yBAAKC,UAAU,oDACb,yBAAKC,IAAKH,IACV,yBAAKI,MAAM,MACT,4BAAKL,EAAMM,MACX,2BAAIN,EAAMO,UCKHC,EAXA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACTC,EAAUD,EAAOE,KAAI,SAACC,EAAKC,GAE/B,OAAO,kBAAC,EAAD,CAAMC,IAAMD,EAAGX,GAAIO,EAAOI,GAAGX,GAAII,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAEjF,OACE,6BACGG,ICMQK,EAdC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC9B,OACE,yBAAKd,UAAU,OACf,2BACEA,UAAU,mCACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCGCI,EAVF,SAACrB,GAEZ,OACE,yBAAKsB,MAAO,CAACC,UAAU,SAASC,OAAO,iBAAiBC,OAAO,UAC5DzB,EAAM0B,WCuCEC,G,wDAtCf,aACC,IAAD,8BACE,gBAeFC,eAAe,SAACC,GAEd,EAAKC,SAAS,CAACd,YAAaa,EAAME,OAAOC,SAhBzC,EAAKC,MAAM,CACTxB,OAAO,GACPO,YAAY,IAJhB,E,gEAQC,IAAD,OACEkB,MAAM,8CAA8CC,MAAK,SAAAC,GACzD,OAAOA,EAASC,UAEfF,MAAK,SAAAG,GACJ,EAAKR,SAAS,CAACrB,OAAO6B,S,+BAQzB,IAAD,OACQC,EAAeC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAhC,GAC5C,OAAOA,EAAOH,KAAKoC,cAAcC,SAAS,EAAKV,MAAMjB,YAAY0B,kBAEnE,OACE,yBAAKvC,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWc,aAAcuB,KAAKZ,iBAC9B,kBAAC,EAAD,KACF,kBAAC,EAAD,CAAUnB,OAAQ8B,U,GAhCJK,IAAMC,YCCxBC,IAASC,OACP,6BACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SNwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.840270d8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\n\nconst Card= (props)=>{\n  var imgpath='https://robohash.org/'+props.id+'?200x200';\n  return (\n    <div className='bg-light-green dib br3 pd3 ma2 grow bw2 shadow-5'>\n      <img src={imgpath}/>\n      <div class='tc'>\n        <h2>{props.name}</h2>\n        <p>{props.email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList=({robots})=>{\n  const CardArray=robots.map((user,i)=>\n  {\n    return <Card key ={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n  });\n  return(\n    <div>\n      {CardArray}\n    </div>\n  );\n}\nexport default CardList;\n","import React from 'react'\n\nconst SearchBox=({searchfield,searchChange})=>{\nreturn (\n  <div className='pa2'>\n  <input\n    className='pa3 ba b--green bg-lightest-blue'\n    type='search'\n    placeholder='search robots'\n    onChange={searchChange}\n  />\n</div>\n);\n\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll=(props)=>{\n\n  return (\n    <div style={{overflowY:'scroll',border:'5px solid blue',height:'600px'}}>\n      {props.children}\n    </div>\n  );\n\n}\n\nexport default Scroll;\n","import React from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport './App.css';\n\nclass App extends React.Component{\nconstructor()\n{\n  super();\n  this.state={\n    robots:[],\n    searchfield:''\n  };\n}\ncomponentDidMount()\n{\n  fetch('https://jsonplaceholder.typicode.com/users').then(response=>{\n  return response.json();\n  })\n  .then(users=>{\n    this.setState({robots:users});\n  });\n}\nonSearchChange=(event)=>\n{\n  this.setState({searchfield: event.target.value});\n}\nrender()\n{\n  const filteredRobots=this.state.robots.filter(robots=>{\n    return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n  });\n  return (\n    <div className='tc'>\n      <h1>Robofriends</h1>\n      <SearchBox searchChange={this.onSearchChange}/>\n      <Scroll>\n    <CardList robots={filteredRobots}/>\n  </Scroll>\n  </div>\n);\n}\n\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Containers/App';\n\nReactDOM.render(\n  <div>\n  <App/>\n</div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}